name: Services Matrix

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  matrix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install tools
        run: |
          python -m pip install --upgrade pip pyyaml
          sudo apt-get update && sudo apt-get install -y jq
      - name: Generate service list
        id: svcs
        run: |
          python - << 'PY'
import yaml, json
inv=yaml.safe_load(open('docs/reference/services.inventory.yaml'))
print('::set-output name=json::'+json.dumps(inv))
PY
      - name: Build images (best effort)
        run: |
          echo '${{ steps.svcs.outputs.json }}' | jq -c '.services[]' | while read -r svc; do
            path=$(echo "$svc" | jq -r '.path');
            name=$(echo "$svc" | jq -r '.name');
            if [ -f "$path/Dockerfile" ]; then
              echo "Building $name ($path)";
              docker build -q -t test/$name:ci $path || true;
            fi;
          done
      - name: Smoke test /healthz (best effort)
        run: |
          echo '${{ steps.svcs.outputs.json }}' | jq -c '.services[]' | while read -r svc; do
            path=$(echo "$svc" | jq -r '.path');
            name=$(echo "$svc" | jq -r '.name');
            port=$(echo "$svc" | jq -r '.port // empty');
            kind=$(echo "$svc" | jq -r '.kind');
            if [ -n "$port" ] && [ -f "$path/Dockerfile" ] && [ "$kind" != "web" ]; then
              echo "Running $name on $port";
              docker run -d --rm -p $port:$port --env PORT=$port --name svc_$name test/$name:ci || true;
              sleep 3;
              curl -fsS http://localhost:$port/healthz || true;
              docker rm -f svc_$name || true;
            fi;
          done
      - name: Gateway smoke (best effort)
        run: |
          # Run auth and policy services
          docker run -d --rm -p 9001:9001 --env PORT=9001 --name svc_auth test/auth-service:ci || true
          docker run -d --rm -p 9002:9002 --env PORT=9002 --name svc_policy test/policy-service:ci || true
          # Run gateway
          docker build -q -t test/api-gateway:ci services/api-gateway || true
          docker run -d --rm -p 9000:9000 --env PORT=9000 --name svc_gateway test/api-gateway:ci || true
          sleep 4
          curl -fsS http://localhost:9000/healthz || true
          # Gateway â†’ services
          curl -fsS -X POST "http://localhost:9000/api/auth/login?username=foo&password=bar" || true
          curl -fsS "http://localhost:9000/api/policies/policies" || true
          docker rm -f svc_gateway svc_auth svc_policy || true
      - name: Unit tests (auth-service, policy-service)
        run: |
          python -m pip install --upgrade pip
          pip install -r services/auth-service/requirements.txt || true
          pip install -r services/policy-service/requirements.txt || true
          python - << 'PY'
import sys, subprocess
print('auth-service tests:')
subprocess.run([sys.executable, '-m', 'pytest', 'services/auth-service'], check=False)
print('policy-service tests:')
subprocess.run([sys.executable, '-m', 'pytest', 'services/policy-service'], check=False)
PY
      - name: Unit tests (search, notification, config)
        run: |
          python -m pip install --upgrade pip
          pip install -r services/search-service/requirements.txt || true
          pip install -r services/notification-service/requirements.txt || true
          pip install -r services/config-service/requirements.txt || true
          python - << 'PY'
import sys, subprocess
print('search-service tests:')
subprocess.run([sys.executable, '-m', 'pytest', 'services/search-service', '--maxfail=1', '-q'], check=False)
print('notification-service tests:')
subprocess.run([sys.executable, '-m', 'pytest', 'services/notification-service', '--maxfail=1', '-q'], check=False)
print('config-service tests:')
subprocess.run([sys.executable, '-m', 'pytest', 'services/config-service', '--maxfail=1', '-q'], check=False)
PY